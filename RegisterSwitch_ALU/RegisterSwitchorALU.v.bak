module RegisterSwitchorALU(OP, K, r0, r1, r2, r3, R0, R1, R2, R3);

	input [2:0] OP;
	input [1:0] K;
	
	input [4:0] r0, r1, r2, r3;
	output reg [4:0] R0, R1, R2, R3;
	
	
	always @(*)
		begin
			case(OP)
				3'b000: begin
					R0 = 5'b00000;
					R1 = 5'b00001;
					R2 = 5'b00010;
					R3 = 5'b00011;
				end
				3'b001: R0 = K;
				3'b010: begin
						begin
							case(K)
								2'b00: R0 = r0;
								2'b01: R0 = r1;
								2'b10: R0 = r2;
								2'b11: R0 = r3;
							endcase
						end
				end
				3'b011: begin
					begin
						case(K)
							2'b00: R0 = r0;
							2'b01: R1 = r0;
							2'b10: R2 = r0;
							2'b11: R3 = r0;
						endcase
					end
				3'b100: begin
						case(K)
							2'b00: R0 = r0 + r0;
							2'b01: R0 = r0 + r1;
							2'b10: R0 = r0 + r2;
							2'b11: R0 = r0 + r3;
						endcase
					end
				3'b101: begin
						case(K)
							2'b00: R0 = r0 - r0;
							2'b01: R0 = r0 - r1;
							2'b10: R0 = r0 - r2;
							2'b11: R0 = r0 - r3;
						endcase
					end
				3'b110: begin
						case(K)
							2'b00: R0 = r0 * r0;
							2'b01: R0 = r0 * r1;
							2'b10: R0 = r0 * r2;
							2'b11: R0 = r0 * r3;
						endcase
					end
				3'b111: begin
						case(K)
							2'b00: R0 = 2 ** r0;
							2'b01: R0 = 2 ** r1;
							2'b10: R0 = 2 ** r2;
							2'b11: R0 = 2 ** r3;
						endcase
					end
				end
			endcase
		end
		
endmodule
				
				

					